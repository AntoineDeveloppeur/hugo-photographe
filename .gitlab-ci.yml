stages:
  - test
  - build-backend
  - run-backend
  - deploy-backend
  - build-frontend
  - deploy

# Cache des dépendances pour accélérer les jobs
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - node_modules/
    - .next/cache/
    - backend/node_modules/

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"

services:
  - docker:dind

before_script:
  - docker info
  - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER
    --password-stdin $CI_REGISTRY

unit-tests:
  stage: test
  image: node:20-alpine
  script:
    - npm ci --legacy-peer-deps
    - npm run test
  artifacts:
    reports:
      junit: junit.xml
    when: always
  allow_failure: true

lint:
  stage: test
  image: node:20-alpine
  script:
    - npm ci --legacy-peer-deps
    - npm run lint
  allow_failure: true

typescript:
  stage: test
  image: node:20-alpine
  script:
    - npm ci --legacy-peer-deps
    - cd ./backend && npm ci
    - npm run type-check

build-backend:
  stage: build-backend
  image: docker:latest
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD"
      $CI_REGISTRY
  script:
    - docker-compose -f docker-compose.ci.yml build backend
    - docker-compose -f docker-compose.ci.yml push backend
    # Tag en latest pour utliser docker-compose up depuis le VPS
    - docker tag ${CI_REGISTRY_IMAGE}/backend:${CI_COMMIT_SHA}
      ${CI_REGISTRY_IMAGE}/backend:latest
    - docker push ${CI_REGISTRY_IMAGE}/backend:latest

run-backend:
  image: docker:latest
  stage: run-backend
  script: docker-compose -f docker-compose.ci.yml up -d backend

# Build Frontend (avec backend disponible)
build-frontend:
  stage: build-frontend
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD"
      $CI_REGISTRY
  script:
    - docker-compose -f docker-compose.ci.yml build frontend
    - docker-compose -f docker-compose.ci.yml push frontend
    - docker tag ${CI_REGISTRY_IMAGE}/frontend:${CI_COMMIT_SHA}
      ${CI_REGISTRY_IMAGE}/frontend:latest
    - docker push "$CI_REGISTRY_IMAGE/frontend:latest

# Nécessaire pour construire une application Next.js avec SSG

#Ou autre version de deploy :
deploy-docker-images:
  image: ubuntu:latest
  stage: deploy
  only:
    - main
  before_script:
    - apt-get -yq update
    - apt-get -yqq install ssh
    - install -m 600 -D /dev/null ~/.ssh/id_rsa
    - echo "$SSH_PRIVATE_KEY" | base64 -d > ~/.ssh/id_rsa
    - ssh-keyscan -H $SSH_HOST > ~/.ssh/known_hosts
  script:
    - ssh $SSH_USER@$SSH_HOST "cd $WORK_DIR && docker compose pull && docker
      compose up -d backend && docker compose up -d frontend && exit"
  after_script:
    - rm -rf ~/.ssh

# Job de nettoyage (optionnel)
cleanup:
  stage: deploy-frontend
  script:
    - docker system prune -f
  when: always
  only:
    - main
    - develop
